Assembly language di Linux


Program dapat dibagi dalam 3 bagian/section

.text berisi kode yang anda buat (read-only)
.data berisi data (read-write)
.bss untuk data yang tidak diinisialisasi (read-write)


Linux system call dipanggil menggunakan interrupt (int) 0x80. Saat interrupt 
diberikan, sistem akan mengambil data dalam register eax yang menunjukan jenis 
system call apa yang dipanggil, serta mengambil data argument pada register ebx, 
ecx, edx, esi, edi, ebp (bukan diambil dari stack). 

Jadi argumen untuk pemanggilan system call disimpan dalam 6 register. Jika jumlah 
argument lebih dari 6 maka ...

Hasil pemanggilan/eksekusi system call akan disimpan pada eax.

List dari penomoran syscall dapat dilihat pada unistd.h. List ini biasa disebut 
vektor. Ketika interrupt terjadi vektor akan menentukan dimana kode yang harus 
dieksekusi untuk mengangani interrupt tersebut.

Perhatikah sebagian kode dari unistd.h berikut:

/*
 * This file contains the system call numbers.
 */
#define __NR_restart_syscall 0
#define __NR_exit            1
#define __NR_fork            2
#define __NR_read            3
#define __NR_write           4
#define __NR_open            5
#define __NR_close           6
....
....


Nilai number diatas adalah nilai yang akan disimpan pada register eax.

Dibawah ini contoh kode assembly untuk menampilkan kalimat "Hello world!" dengan menggunakan
linux syscall sys_write kemudian menggunakan syscall sys_exit untuk keluar dari program.

------------------------------------------------------------------------
.data                       # section declaration

msg:
	.ascii	"Hello world!\n"  # our dear string
	len = . - msg             # length of our dear string

.text                       # section declaration
                            # we must export the entry point to the ELF linker or
  .global _start            # loader. They conventionally recognize _start as their
                            # entry point. Use ld -e foo to override the default.

_start:

# write our string to stdout

	movl	$len,%edx # third argument: message length
	movl	$msg,%ecx # second argument: pointer to message to write
	movl	$1,%ebx   # first argument: file handle (stdout)
	movl	$4,%eax   # system call number (sys_write)
	int	$0x80       # call kernel

# and exit

	movl	$0,%ebx   # first argument: exit code
	movl	$1,%eax   # system call number (sys_exit)
	int	$0x80       # call kernel
	
------------------------------------------------------------------------
kode diadopsi dari Linux Assembly HOWTO [http://www.faqs.org/docs/Linux-HOWTO/Assembly-HOWTO.html]
                                                       
       